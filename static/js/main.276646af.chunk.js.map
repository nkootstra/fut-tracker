{"version":3,"sources":["Provider.js","components/SubObjective.js","components/Countdown.js","components/Objective.js","components/Objectives.js","App.js","serviceWorker.js","index.js"],"names":["StateContext","React","createContext","objectives","progress","Provider","state","SetupState","updateProgress","currentProgress","id","updatedState","update","$merge","updateAndSave","JSON","parse","localStorage","getItem","Objectives","stateUpdate","Promise","resolve","reject","setState","storeStateToLocalStorage","error","newState","prop","this","setItem","stringify","children","props","value","Component","SubObjective","progressBarRef","createRef","progression","completed","objective","amount","handleProgress","currentProgression","isCompleted","className","title","ref","style","width","Math","round","Number","EPSILON","description","type","onClick","handleProcess","disabled","Countdown","calculateTimeLeft","difference","Date","date","timeLeft","days","floor","hours","minutes","seconds","useState","setTimeLeft","useEffect","setTimeout","timerComponents","Object","keys","forEach","interval","push","length","Objective","handleProgression","bind","context","end_date","aria-disabled","subObjectives","map","sub","key","parent","contextType","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.276646af.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Objectives from './data/Objectives.json';\nimport update from 'immutability-helper';\n\nexport const StateContext = React.createContext({objectives:[],progress:[]});\n\nconst objectivesKey = 'state';\n\nexport default class Provider extends Component {\n\n    state = this.SetupState();\n\n    SetupState() {\n        let state = JSON.parse(localStorage.getItem(objectivesKey));\n\n        if (!state) {\n            state = {\n                objectives: Objectives,\n                progress: {}\n            };\n        }\n\n        state.updateProgress = (currentProgress, id) => this.updateProgress(currentProgress, id);\n\n        return state;\n    }\n\n    updateProgress = (currentProgress, id) => {\n        const updatedState = update(this.state, {\n            progress: {\n                $merge: {[id]: currentProgress}\n            }\n        });\n        return this.updateAndSave(updatedState);\n    };\n\n    updateAndSave(stateUpdate) {\n        return new Promise((resolve, reject) => {\n            this.setState(stateUpdate, () => {\n                try {\n                    this.storeStateToLocalStorage();\n                    resolve();\n                } catch (error) {\n                    reject(error);\n                }\n            });\n        });\n    }\n\n    storeStateToLocalStorage() {\n        const newState = {};\n\n        for (const prop in this.state) {\n            if (typeof prop === 'function') {\n                continue;\n            }\n            newState[prop] = this.state[prop];\n        }\n\n        localStorage.setItem(objectivesKey, JSON.stringify(newState));\n    }\n\n    render() {\n        const { children } = this.props;\n        return <StateContext.Provider value={this.state}>{children}</StateContext.Provider>;\n    }\n}","import React, { Component } from \"react\";\n\nexport default class SubObjective extends Component {\n\n    constructor(props) {\n        super(props);\n        this.progressBarRef = React.createRef();\n    }\n\n    handleProcess(progression) {\n        // check if completed\n        let completed = progression >= this.props.objective.amount;\n\n        this.props.handleProgress(\n            {progression:progression, completed:completed},\n            this.props.objective.id\n        )\n    }\n\n    render() {\n        let currentProgression = this.props.currentProgression?.progression || 0;\n        let isCompleted = this.props.currentProgression?.completed || false;\n\n        return (\n\n            <li className={ isCompleted ? 'opacity-25' : '' }>\n                <div className=\"px-4 py-4 sm:px-6\">\n                    <div className=\"flex items-center justify-between\">\n                        <div className=\"text-sm leading-5 font-medium text-indigo-600 truncate\">\n                            {this.props.objective.title} ({currentProgression}/{this.props.objective.amount})\n                        </div>\n                        <div className=\"flex\">\n                            <div className=\"inline-flex block h-2 w-64 bg-gray-100 rounded-md\">\n                                <span className=\"h-full w-auto bg-green-400 rounded-md text-center progressbar\" ref={this.progressBarRef}\n                                      style={{width: `${Math.round( (currentProgression/this.props.objective.amount) * 100 + Number.EPSILON)}%` }}></span>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"mt-2 flex justify-between\">\n                        <div className=\"sm:flex\">\n                            <div className=\"mr-6 flex items-center text-sm leading-5 text-gray-500\">\n                                {this.props.objective.description}\n                            </div>\n                        </div>\n                        <div className=\"sm:flex\">\n                            <div className=\"mr-1 flex items-center\">\n                                {currentProgression!== 0 &&\n                                <button type=\"button\"\n                                        onClick={() => this.handleProcess(currentProgression-1)}\n                                        className=\"relative inline-flex items-center px-3 py-1.5 border border-transparent text-sm leading-3 font-medium rounded-md text-white bg-red-600 hover:bg-red-500 focus:outline-none focus:shadow-outline-indigo focus:border-red-700 active:bg-red-700\">\n                                    -1\n                                </button>}\n\n                                <button type=\"button\"\n                                        disabled={isCompleted}\n                                        onClick={() => this.handleProcess(currentProgression+1)}\n                                        className=\"ml-2 relative inline-flex items-center px-3 py-1.5 border border-transparent text-sm leading-3 font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-500 focus:outline-none focus:shadow-outline-indigo focus:border-indigo-700 active:bg-indigo-700\">\n                                    +1\n                                </button>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </li>\n        );\n    }\n}","import React, { useEffect, useState } from 'react';\n\nfunction Countdown(props) {\n    const calculateTimeLeft = () => {\n        const difference = +new Date(props.date) - +new Date();\n        let timeLeft = {};\n\n        if (difference > 0) {\n            timeLeft = {\n                days: Math.floor(difference / (1000 * 60 * 60 * 24)),\n                hours: Math.floor((difference / (1000 * 60 * 60)) % 24),\n                minutes: Math.floor((difference / 1000 / 60) % 60),\n                seconds: Math.floor((difference / 1000) % 60)\n            };\n        }\n\n        return timeLeft;\n    };\n\n    const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());\n\n    useEffect(() => {\n        setTimeout(() => {\n            setTimeLeft(calculateTimeLeft());\n        }, 1000);\n    });\n\n    const timerComponents = [];\n\n    Object.keys(timeLeft).forEach(interval => {\n        if (!timeLeft[interval]) {\n            return;\n        }\n\n        timerComponents.push(\n            <span>\n        {timeLeft[interval]} {interval}{\" \"}\n      </span>\n        );\n    });\n\n    return (\n        <div className=\"ml-4 px-3 py-2 font-medium text-sm leading-5 rounded-md text-gray-600 bg-gray-200\">\n            {timerComponents.length ? timerComponents : <span>:(</span>}\n        </div>\n    );\n}\n\nexport default Countdown;","import React, { Component } from \"react\";\nimport { StateContext } from '../Provider';\nimport SubObjective from \"./SubObjective\";\nimport Countdown from \"./Countdown\";\n\nexport default class Objective extends Component {\n\n    constructor(props) {\n        super(props);\n        this.handleProgression = this.handleProgression.bind(this);\n    }\n\n    handleProgression(currentProgress, id) {\n        this.context.updateProgress(currentProgress, id);\n    }\n\n    render() {\n        return (\n            <div className=\"bg-white overflow-hidden sm:rounded-lg sm:shadow pb-5 mb-5\">\n                <div className=\"bg-white px-4 py-5 border-b border-gray-200 sm:px-6\">\n                    <div className=\"-ml-4 -mt-4 flex justify-between items-center flex-wrap sm:flex-no-wrap\">\n                        <div className=\"ml-4 mt-2\">\n                            <h3 className=\"text-lg leading-6 font-medium text-gray-900\">\n                                {this.props.objective.title}\n                            </h3>\n                            <span className=\"text-xs text-gray-600\">{this.props.objective.description}</span>\n                        </div>\n                        <div className=\"ml-4 mt-2 flex-shrink-0\">\n                          <span className=\"inline-flex\">\n                            <Countdown date={this.props.objective.end_date}/>\n                          </span>\n                        </div>\n                    </div>\n                </div>\n                <ul aria-disabled=\"true\">\n                    { this.props.subObjectives.map( sub => {\n\n                        let progression = this.context.progress[sub.id];\n\n                        return (<SubObjective key={sub.id}\n                                              parent={this.props.parent}\n                                              objective={sub}\n                                              currentProgression={progression}\n                                              handleProgress={this.handleProgression}/>);\n\n\n                    })}\n                </ul>\n            </div>\n        );\n    }\n}\n\nObjective.contextType = StateContext;","import React, { Component } from \"react\";\nimport { StateContext } from \"../Provider\";\nimport Objective from './Objective'\n\nexport default class Objectives extends Component {\n\n    render() {\n        const { objectives } = this.context;\n        return (\n            <div>\n                { objectives.map(objective =>\n                    <Objective key={objective.id}\n                               parent={objective.id}\n                               objective={objective}\n                               subObjectives={objective.objectives}/>)\n                }\n            </div>\n        );\n    }\n}\n\nObjectives.contextType = StateContext;","import React, { Component } from 'react';\nimport Provider from \"./Provider\";\nimport Objectives from \"./components/Objectives\";\nimport './App.css';\n\nexport default class App extends Component {\n\n    render() {\n        return (\n            <Provider>\n                <div className=\"mt-5 container mx-auto\">\n                    <Objectives />\n                </div>\n            </Provider>\n        );\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}